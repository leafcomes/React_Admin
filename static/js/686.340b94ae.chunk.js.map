{"version":3,"file":"static/js/686.340b94ae.chunk.js","mappings":"ySAKqBA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GA8ClB,OA9CkBA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KACnBC,QAAU,GAAG,EACbC,MAAQ,CAENC,QAAS,CACPC,MAAO,CACLC,KAAM,4BAERC,QAAS,CACPC,QAAS,OACTC,YAAa,CACXC,KAAM,QACNC,MAAO,CACLC,gBAAiB,aAIvBC,KAAM,CACJC,OAAQ,KACRC,cAAc,GAEhBC,MAAO,CACL,CACEC,aAAa,IAGjBC,MAAO,CACL,CACER,KAAM,YA1BN,EA+BRS,eAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAgB,wGACcC,IAAAA,IAAU,kBADxB,mBAEU,OADVC,EADA,EACNC,MACAC,KAAKC,OAFC,yCAGLC,EAAAA,QAAAA,MAAc,2DAHT,OAKRrB,GAAUsB,EAAAA,EAAAA,OAAM,EAAKvB,MAAMC,QAASiB,EAAIC,MAC9C,EAAKK,SAAS,CAAEvB,QAAAA,GAAW,EAAKwB,YANlB,6CAQhBA,WAAa,SAACC,GAEZ,EAAK3B,QAAU4B,EAAAA,KAAaC,SAASC,eAAe,SAEpD,EAAK9B,QAAQ+B,UAAU,EAAK9B,MAAMC,UACnC,EASA,OATA,yCACD,WAAqB,IAAD,OAClB8B,KAAKf,gBACLgB,OAAOC,SAAW,WAChB,EAAKlC,QAAQmC,YAEhB,oBACD,WACE,OAAO,gBAAKC,GAAG,OAAOC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,eACvD,EAvDkBxC,CAAgByC,EAAAA","sources":["pages/DataStatistics/Reports/index.jsx"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport * as echarts from \"echarts\";\r\nimport { message } from \"antd\";\r\nimport axios from \"axios\";\r\nimport { merge } from \"lodash\";\r\nexport default class Reports extends Component {\r\n  myChart = {};\r\n  state = {\r\n    //需要合并的数据\r\n    options: {\r\n      title: {\r\n        text: \"用户来源\",\r\n      },\r\n      tooltip: {\r\n        trigger: \"axis\",\r\n        axisPointer: {\r\n          type: \"cross\",\r\n          label: {\r\n            backgroundColor: \"#E9EEF3\",\r\n          },\r\n        },\r\n      },\r\n      grid: {\r\n        bottom: \"3%\",\r\n        containLabel: true,\r\n      },\r\n      xAxis: [\r\n        {\r\n          boundaryGap: false,\r\n        },\r\n      ],\r\n      yAxis: [\r\n        {\r\n          type: \"value\",\r\n        },\r\n      ],\r\n    },\r\n  };\r\n  getReportData = async () => {\r\n    const { data: res } = await axios.get(\"reports/type/1\");\r\n    if (res.meta.status !== 200) {\r\n      return message.error(\"获取报表数据失败！\");\r\n    }\r\n    const options = merge(this.state.options, res.data);\r\n    this.setState({ options }, this.drawReport);\r\n  };\r\n  drawReport = (params) => {\r\n    // 基于准备好的dom，初始化echarts实例\r\n    this.myChart = echarts.init(document.getElementById(\"main\"));\r\n    // 指定图表的配置项和数据\r\n    this.myChart.setOption(this.state.options);\r\n  };\r\n  componentDidMount() {\r\n    this.getReportData();\r\n    window.onresize = () => {\r\n      this.myChart.resize();\r\n    };\r\n  }\r\n  render() {\r\n    return <div id=\"main\" style={{ width: \"100%\", height: \"400px\" }}></div>;\r\n  }\r\n}\r\n"],"names":["Reports","myChart","state","options","title","text","tooltip","trigger","axisPointer","type","label","backgroundColor","grid","bottom","containLabel","xAxis","boundaryGap","yAxis","getReportData","axios","res","data","meta","status","message","merge","setState","drawReport","params","echarts","document","getElementById","setOption","this","window","onresize","resize","id","style","width","height","Component"],"sourceRoot":""}